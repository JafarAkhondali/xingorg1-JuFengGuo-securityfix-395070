{
  "compilerOptions": {
    /* 基础配置 */
    // "incremental": true,                   /* 增量：启动增量编译 */
    "target": "es2016",                       /* 指定ECMAScript目标版本: 'ES3' (默认), 'ES5', 'ES2015', 'ES2016', 'ES2017', 'ES2018', 'ES2019' or 'ESNEXT'. */
    "module": "commonjs",                       /* 指定模块代码生成: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', or 'ESNext'. 使用哪种模块化标准*/
    "lib": ["es2016"],                        /* 指定要包含在编译中的库文件.默认情况下ts使用的是哪个环境,默认没有node环境，需要@type/node自行安装 */
    // "allowJs": true,                       /* 允许编译javascript文件. */
    // "checkJs": true,                       /* 报告js中的错误 */
    // "jsx": "preserve",                     /* 指定JSX代码生成: 'preserve', 'react-native', or 'react'. */
    // "declaration": true,                   /* 宣言：生成相应的'.d.ts'文件 */
    // "declarationMap": true,                /* 为每一个'.d.ts'文件生成相应的sorcemap */
    // "sourceMap": true,                     /* 生成相应的'.map'文件 */
    // "outFile": "./",                       /* 链接并将输出发送到单个文件 */
    "outDir": "./dist",                       /* 将输出结构重定向到目录. */
    // "rootDir": "./",                       /* 指定输入文件的根目录. 用于用--outDir来控制输出目录结构. */
    // "composite": true,                     /* 复合：使项目编译 */
    // "tsBuildInfoFile": "./",               /* 指定文件来存储增量编译信息 */
    // "removeComments": true,                   /* 不向输出发出注释. */
    // "noEmit": true,                        /* 不发出输出. */
    // "importHelpers": true,                 /* 从'tslib'导入emit helpers. */
    // "downlevelIteration": true,            /* 当目标为“ES5”或“ES3”时，为“for-of”、“spread”和“destructuring”中的迭代器提供完全支持. */
    // "isolatedModules": true,               /* 将每个文件转换为单独的模块(类似于“ts.transpileModule”). */

    /* 严格的类型检查选项 */
    "strict": true,                           /* 启用所有严格的类型检查选项. */
    // "noImplicitAny": true,                 /* 使用隐含的“any”类型在表达式和声明上引发错误. */
    "strictNullChecks": true,                 /* 启用严格的空检查. */
    // "strictFunctionTypes": true,           /* 启用对函数类型的严格检查. */
    // "strictBindCallApply": true,           /* 在函数上启用严格的“call”、“apply”和“bind”方法. */
    // "strictPropertyInitialization": true,  /* 在类中启用严格的属性初始化检查. */
    // "noImplicitThis": true,                /* 使用隐含的“any”类型对“this”表达式提出错误 */
    // "alwaysStrict": true,                  /* 在严格模式下解析并为每个源文件发出“use strict”. */
    "noImplicitUseStrict": false,             /* 编译结果文件顶部是否包含“use strict”. */

    /* 额外的检查 */
    // "noUnusedLocals": true,                /* 报告未使用的本地变量上的错误. */
    // "noUnusedParameters": true,            /* 报告未使用参数的错误. */
    // "noImplicitReturns": true,             /* 当函数中并非所有代码路径都返回值时报告错误. */
    // "noFallthroughCasesInSwitch": true,    /* 在switch语句中报告错误. */

    /* 模块解析选项 */
    // "moduleResolution": "node",            /* 指定模块解析策略: 'node' (Node.js) or 'classic' (TypeScript pre-1.6). */
    // "baseUrl": "./",                       /* 用于解析非绝对模块的基本目录. */
    // "paths": {},                           /* 将导入重新映射到相对于“baseUrl”的查找位置的一系列条目. */
    // "rootDirs": [],                        /* 根文件夹列表，其组合内容表示运行时项目的结构. */
    // "typeRoots": [],                       /* 要包含类型定义的文件夹列表. */
    // "types": [],                           /* 键入要包含在编译中的声明文件. */
    // "allowSyntheticDefaultImports": true,  /* 允许从没有默认导出的模块进行默认导入，这并不影响代码发出，只影响类型查询. */
    "esModuleInterop": true                   /* 通过为所有导入创建命名空间对象，支持CommonJS和ES模块之间的互操作性，意味着. allowSyntheticDefaultImports*/
    // "preserveSymlinks": true,              /* 不解决符号链接的实际路径. */
    // "allowUmdGlobalAccess": true,          /* 允许从模块访问UMD全局值. */

    /* Source Map 选项 */
    // "sourceRoot": "",                      /* 指定调试器应该定位TypeScript文件而不是源文件的位置. */
    // "mapRoot": "",                         /* 指定调试器应该定位映射文件的位置，而不是生成的位置. */
    // "inlineSourceMap": true,               /* 发出一个带有源映射的文件，而不是一个单独的文件. */
    // "inlineSources": true,                 /* 将源文件与源文件一起发出，需要设置inlineSourceMap或-sourceMap. */

    /* 实验选项 */
    // "experimentalDecorators": true,        /* 启动对ES7装饰器的实验性支持. */
    // "emitDecoratorMetadata": true,         /* 启用对为装饰器发出类型元数据的实验性支持. */
  },
  /* 配置要编译的文件 */
  "include": ["./src"]
}
